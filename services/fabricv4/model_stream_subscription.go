/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscription{}

// StreamSubscription Stream Subscription object
type StreamSubscription struct {
	// Stream Subscription URI
	Href *string `json:"href,omitempty"`
	// Equinix-assigned access point identifier
	Uuid                 *string                   `json:"uuid,omitempty"`
	State                *StreamSubscriptionState  `json:"state,omitempty"`
	Filters              *StreamSubscriptionFilter `json:"filters,omitempty"`
	Sink                 *StreamSubscriptionSink   `json:"sink,omitempty"`
	Changelog            *Changelog                `json:"changelog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscription StreamSubscription

// NewStreamSubscription instantiates a new StreamSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscription() *StreamSubscription {
	this := StreamSubscription{}
	return &this
}

// NewStreamSubscriptionWithDefaults instantiates a new StreamSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionWithDefaults() *StreamSubscription {
	this := StreamSubscription{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *StreamSubscription) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *StreamSubscription) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *StreamSubscription) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StreamSubscription) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StreamSubscription) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StreamSubscription) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StreamSubscription) GetState() StreamSubscriptionState {
	if o == nil || IsNil(o.State) {
		var ret StreamSubscriptionState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetStateOk() (*StreamSubscriptionState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StreamSubscription) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given StreamSubscriptionState and assigns it to the State field.
func (o *StreamSubscription) SetState(v StreamSubscriptionState) {
	o.State = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *StreamSubscription) GetFilters() StreamSubscriptionFilter {
	if o == nil || IsNil(o.Filters) {
		var ret StreamSubscriptionFilter
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetFiltersOk() (*StreamSubscriptionFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *StreamSubscription) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given StreamSubscriptionFilter and assigns it to the Filters field.
func (o *StreamSubscription) SetFilters(v StreamSubscriptionFilter) {
	o.Filters = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *StreamSubscription) GetSink() StreamSubscriptionSink {
	if o == nil || IsNil(o.Sink) {
		var ret StreamSubscriptionSink
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetSinkOk() (*StreamSubscriptionSink, bool) {
	if o == nil || IsNil(o.Sink) {
		return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *StreamSubscription) HasSink() bool {
	if o != nil && !IsNil(o.Sink) {
		return true
	}

	return false
}

// SetSink gets a reference to the given StreamSubscriptionSink and assigns it to the Sink field.
func (o *StreamSubscription) SetSink(v StreamSubscriptionSink) {
	o.Sink = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *StreamSubscription) GetChangelog() Changelog {
	if o == nil || IsNil(o.Changelog) {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetChangelogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *StreamSubscription) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *StreamSubscription) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o StreamSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Sink) {
		toSerialize["sink"] = o.Sink
	}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscription) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscription := _StreamSubscription{}

	err = json.Unmarshal(data, &varStreamSubscription)

	if err != nil {
		return err
	}

	*o = StreamSubscription(varStreamSubscription)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "sink")
		delete(additionalProperties, "changelog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscription struct {
	value *StreamSubscription
	isSet bool
}

func (v NullableStreamSubscription) Get() *StreamSubscription {
	return v.value
}

func (v *NullableStreamSubscription) Set(val *StreamSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscription(val *StreamSubscription) *NullableStreamSubscription {
	return &NullableStreamSubscription{value: val, isSet: true}
}

func (v NullableStreamSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
